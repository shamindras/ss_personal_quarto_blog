{
  "hash": "f7be649382009c21d2ff2dea8716dbfa",
  "result": {
    "markdown": "---\ntitle: \"Setting up a Distill Blog with Netlify\"\ndescription: |\n  First part of a series on how I setup this `distill` themed blog with `Netlify`\ncategories: [distill]\nslug: shrotriya2019distillpt1\ndate: \"2019-07-11\"\nimage: images/08_06_netlify_adding_custom_domain.png\nformat: \n  html:\n    code-link: true\nexecute:\n  echo: true\neditor_options: \n  markdown: \n    wrap: 80\n---\n\n\n\n\n## Step 0: Introduction\n\nThis is a meta blogpost to describe how I setup this personal academic blog. It\nis based on the relatively new\n[distill](https://rstudio.github.io/distill/){target=\"_blank\"} package by the\n[RStudio](h//www.rstudio.com/){target=\"_blank\"} team. The main tools used I\nused to create this blog are:\n\n- My personal [Github account](https://github.com/shamindras){target=\"_blank\"}\n- The [RStudio editor](https://www.rstudio.com/products/rstudio/){target=\"_blank\"}\n- The `R` packages [`distill`](https://github.com/rstudio/distill){target=\"_blank\"} and\n[`here`](https://github.com/r-lib/here){target=\"_blank\"}\n- A macbook pro (2017 edition) and the [iterm2](https://www.iterm2.com/){target=\"_blank\"} terminal\n- My personal [netlify account](https://app.netlify.com){target=\"_blank\"} and also my personal\ndomain bought from [Google Domains](https://domains.google/){target=\"_blank\"}\n\nThe details of *how* I used the tools used are all noted below in a\nstep-by-step manner.\n\nImportantly, I should note that the RStudio `distill` team has already created\nan [excellent distill blog creation\ntutorial](https://rstudio.github.io/distill/blog.html){target=\"_blank\"} which I\nthoroughly used and highly recommend to new users. I wrote this meta blogpost\nin my own words so that I can personally remember the details going forward. I\nalso added more details on deployment with Google Domains and Netlify that\nwould hopefully be useful to new `R` users waiting to deploy a similar\n`distill` blog.\n\n<aside> Admittedly this blogpost is verbose, but hopefully the details help\nusers new to the `distill` blogging package. </aside>\n\n## Step 1: Create new distill blog repo\n\nI opted to manage my blog versioning using Git/Github. I started by going to my\npersonal `github` account and create a new repository. I called mine\n`ss_personal_distill_blog` and also initialized it with a `README.md` and\nincluded an `.gitignore` for `R` since that will the blogging language of\nchoice here üòÑ. This is shown in the screenshot below.\n\n<center>\n\n::: {.cell}\n::: {.cell-output-display}\n![Setting up the Site Github repo](/Users/shamindras/DROPBOX/REPOS/ss_personal_quarto_blog/posts/2019-07-11-shrotriya2019distillpt1/images/01_01_create_github_distill_repo.png){width=150%}\n:::\n:::\n\n</center>\n\n<aside> Options for creating the Github repo for the `distill` blog </aside>\n\nOnce created the repo will appear in `github` as seen in the following\nscreenshot\n\n<center>\n\n::: {.cell}\n::: {.cell-output-display}\n![New Site Github repo with README.md](/Users/shamindras/DROPBOX/REPOS/ss_personal_quarto_blog/posts/2019-07-11-shrotriya2019distillpt1/images/01_02_newly_created_distill_repo.png){width=150% class=external}\n:::\n:::\n\n</center>\n\n<aside> Newly created Github repo for the `distill` blog </aside>\n\n## Step 2: Clone the repo locally\n\nWith the `github` repo created, I switched locally on my mac to `iterm2`\nterminal and cloned the repo locally using the following command:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit clone git@github.com:shamindras/ss_personal_distill_blog.git\n```\n:::\n\n\nAnd the cloning quickly finished with the following output\n\n```markup\nCloning into 'ss_personal_distill_blog'...\nremote: Enumerating objects: 4, done.\nremote: Counting objects: 100% (4/4), done.\nremote: Compressing objects: 100% (4/4), done.\nremote: Total 4 (delta 0), reused 0 (delta 0), pack-reused 0\nReceiving objects: 100% (4/4), done.\n```\n\nNow I simply changed into the newly cloned blog directory by running the\nfollowing terminal command:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd ss_personal_distill_blog\n```\n:::\n\n\nI then ran the following terminal command:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntree\n```\n:::\n\n\nThis resulted in the following directory structure so far:\n\n```markup\n.\n‚îú‚îÄ‚îÄ .git\n‚îú‚îÄ‚îÄ .gitignore\n‚îî‚îÄ‚îÄ README.md\n```\n\nGreat, now the repo was setup locally. At this stage there is just a simple\n`README.md` which will get added to a bit later, but the main focus is to start\ncreating the `distill` blog within this directory locally.\n\n## Step 3: Create the distill blog files\n\nIn order to start creating the blog contents I opened up an instance of\n`RStudio` from within my new directory on my macbook via the following terminal\ncommand:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nopen -a /Applications/RStudio.app .\n```\n:::\n\n\n<aside> **Note:** The `.` at the end of the command ensures that `RStudio`\nopens in this newly created blog directory </aside>\n\nWith `RStudio` opened we can now run the following `R` commands in just the\n`console` to create the install the required and `distill` blog setup packages:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreq_pckgs <- c(\"distill\", \"here\")\ninstall.packages(pkgs = req_pckgs)\nlibrary(here)\nlibrary(distill)\n```\n:::\n\n\nNow we can create our blog using the following 2 commands from the freshly\ninstalled `distill` package using the following command run in the `console`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistill::create_blog(dir = here::here(),\n                     title = \"Shamindra's Shrotriya's blog\",\n                     gh_pages = TRUE)\n```\n:::\n\n\nNote that we set `gh_pages = TRUE` to ensure that we can host this blog on\n[github pages](https://pages.github.com/){target=\"_blank\"} down the line if\nneeded.  You can omit this if you don't want the option to have *github pages*\nas your host in the future. I will be using `Netlify` to host my blog (see\nbelow), but it is good to have an additional host option in the future.\n\nMy local `distill` blog directory now looked like this (again after running the\n`tree` command in the terminal):\n\n```markup\n.\n‚îú‚îÄ‚îÄ .git\n‚îú‚îÄ‚îÄ .gitignore\n‚îú‚îÄ‚îÄ .nojekyll\n‚îú‚îÄ‚îÄ README.md\n‚îú‚îÄ‚îÄ _posts\n‚îú‚îÄ‚îÄ _site.yml\n‚îú‚îÄ‚îÄ about.Rmd\n‚îú‚îÄ‚îÄ docs\n‚îú‚îÄ‚îÄ index.Rmd\n‚îî‚îÄ‚îÄ ss_personal_distill_blog.Rproj\n```\n\nPretty cool! Note that there is a newly created `_posts` directory for future\nblogposts.  And there is a directory called `docs` to store all our processed\nblogposts later. If we had set `gh_pages = FALSE` the `docs` directory would be\nautomatically replaced by a `_site` directory. More on this point later.\n\n## Step 4: Customize the welcome blogpost\n\nSo `distill` already had us underway with a default welcome blogpost contained\nin the `welcome.Rmd` file for us. There are a bunch of javascript related files\nautomatically generated in the `_posts/welcome/welcome_files` directory but\nthese don't need to be altered by the user. I just needed to modify\n`welcome.Rmd` contents per my preference as with any regular `Rmd` file and\nclick `Knit` in RStudio to refresh it. We can see this in the `_posts`\ndirectory:\n\n```markup\n./_posts/welcome\n‚îú‚îÄ‚îÄ welcome.Rmd\n‚îú‚îÄ‚îÄ welcome.html\n‚îî‚îÄ‚îÄ welcome_files\n```\n\nOne thing that slightly bothered me is that the default **welcome** blogpost\nhas no **date** prefix in the directory. This would be nice to have in order to\nsort all future blogposts chronologically. I could've modified this default\nwelcome blogpost `Rmd` and directory to include the date prefix manually. For\nsimplicity I opted to delete the default welcome directory altogether and\nrecreated it with the date prefix as I prefer as detailed below.\n\nTo delete the default welcome directory, I just ran the following code at my\nterminal:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nrm -rf _posts/welcome\n```\n:::\n\n\n<aside> **Note:** ‚ö†Ô∏è Always be careful using `rm -rf`\n</aside>\n\nWith the default welcome blogpost deleted, I created my own custom welcome\nblogpost as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistill::create_post(title = \"Welcome to Shamindra‚Äôs Blog\",\n                     author = \"Shamindra Shrotriya\",\n                     date_prefix = TRUE)\n```\n:::\n\n\n\nNow the welcome blogpost has this nice **date prefix** structure since we\npassed this option as `TRUE`. Let's see what the `_posts` directory looks like\nnow\n\n```markup\n_posts/2019-07-10-welcome-to-shamindras-blog\n‚îî‚îÄ‚îÄ welcome-to-shamindras-blog.Rmd`\n```\n\nNeat - just how I like it! I then modified the content of the new welcome\nblogpost by going to the following file:\n\n```markup\n_posts/2019-06-21-welcome-to-shamindras-blog/welcome-to-shamindras-blog.Rmd\n```\n\nI modified the contents and then **knitted** the `Rmd` file once done to\nrefresh and save the contents.\n\nNow I had locally created my first personalized content, a simple welcome post\nüòé.\n\n<aside> My welcome blog entry can be found\n[here](https://github.com/shamindras/ss_personal_distill_blog/blob/master/_posts/2019-07-10-shrotriya2019welcome/shrotriya2019welcome.Rmd)\nfor reference. </aside>\n\n## Step 5: Customize your blog layout\n\nNow I needed to customize the blog header banner and setup links and update\ncontents as required.\n\nWe will start with the `_site.yml` contents which controls the page layout.  I\nmodified the `_site.yml` file which contains default metadata settings for the\nblog to have the following contents:\n\n```markup\nname: \"test_distill_blog\"\ntitle: \"Shamindra's Blog\"\ndescription: |\n  Shamindra Shrotriya's personal blog/ site. Some fun posts\n  on math, statistics and the PhD student life.\noutput_dir: \"_site\"\nnavbar:\n  right:\n    - text: \"Home\"\n      href: index.html\n    - text: \"About\"\n      href: about.html\n    - icon: fa fa-rss\n      href: index.xml\ncollections:\n  posts:\n    share: [twitter, linkedin]\nbase_url: https://www.shamindras.com/\noutput: distill::distill_article\n```\n\n<aside> My `_site.yml` file can be found\n[here](https://github.com/shamindras/ss_personal_distill_blog/blob/master/_site.yml){target=\"_blank\"}\nfor reference. </aside>\n\nI updated the `About.Rmd` file as required and knit it.  This is a default\n`Rmd` that `distill` conveniently creates this file to give readers some\nbackground on the site purpose and of course about the author.\n\n<aside> My `About.Rmd` file can be found\n[here](https://github.com/shamindras/ss_personal_distill_blog/blob/master/about.Rmd){target=\"_blank\"}\nfor reference. </aside>\n\nNo need to update the default `distill` `Index.Rmd` file that is automatically\ncreated. I simply opened it and `knit` it manually in `RStudio` to update the\nsite contents.\n\nI also updated the `README.md` to add some useful information (for any users\nwho stumble onto the `github` page) and saved it. No need to knit anything here\nas it is a simple `markdown file`.\n\n<aside> My `README.md` can be found\n[here](https://github.com/shamindras/ss_personal_distill_blog/blob/master/README.md){target=\"_blank\"}\nfor reference. </aside>\n\nNow in `Rstudio` I just knit the `welcome.Rmd` post and also ran the following\ncommand in the `console`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmarkdown::render_site(input = here::here())\n```\n:::\n\n\nThe locally created `distill` blog was now created and rendered and looked like\nthis in the `RStudio` viewer pane:\n\n<center>\n\n::: {.cell}\n::: {.cell-output-display}\n![Newly Created Distill Blog (local)](/Users/shamindras/DROPBOX/REPOS/ss_personal_quarto_blog/posts/2019-07-11-shrotriya2019distillpt1/images/05_01_newlyr_created_distill_blog.png){width=1660 class=external}\n:::\n:::\n\n</center>\n\nPretty cool - I now had a working local version of our blog in `RStudio`.\n\n## Step 6: Commit and push changes to github\n\nNote that all our changes are so far in our local git repo. We need to get this\nblog online! A first step is to `commit` and `push` them to our `github` repo.\nI did this in my local directory in the terminal as follows: in git at my\nterminal as follows:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit add -A # Add all new changes\ngit commit -m \"ENH: Created welcome post with date prefix, deleted default post\"\ngit push origin master\n```\n:::\n\n\nAnd the changes are now reflected in the `github` `master` branch!\n\n## Step 7: Buy a Domain name (optional)\n\nAlthough the blog was our blog contents are in a public online place i.e.\n`github`, I just needed to link it to a service that deploys websites from\n`github`. But first I needed to go buy a domain name for my blog. I went to\n[Google Domains](https://domains.google/#/) and bought `www.shamindras.com` for\nabout $15/yr.\n\nThere are free alternatives e.g.  [Github\nPages](https://pages.github.com/){target=\"_blank\"}, but I wanted to have\nownership on my page and found the annual fee to be reasonable with Google\nDomains.\n\n## Step 8: Deploy your website with Netlify\n\nNow that the domain name is bought, I just needed to deploy the newly created\nblog contents on the registered domain name. Enter\n[netlify](https://www.netlify.com/){target=\"_blank\"}! This is a free (and\nawesome) deployment service. I created a personal account following the\nintructions on Netlify website.\n\nI then logged in to Netlify and clicked on the green `New site from Git` button\nto get started. In the following menu I clicked the `Github Continuous\nDeployment` icon:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Creating New Site with Netlify](/Users/shamindras/DROPBOX/REPOS/ss_personal_quarto_blog/posts/2019-07-11-shrotriya2019distillpt1/images/08_01_netlify_github_continuous_deployment.png){width=150% class=external}\n:::\n:::\n\n\nI then manually searched for my blog repo i.e. `ss_personal_distill_blog`.\nInitially this did not appear, so I clicked the green **Configure the Netlify\napp on GitHub** link at the bottom and gave Netlify permissions to access this\nsite. This is so Netlify can automatically sync with the github repo and deploy\nchanges going forward as I make them directly to my `github` blog repo.\n\n<center>\n\n::: {.cell}\n::: {.cell-output-display}\n![Giving Netlify New Github repo Access](/Users/shamindras/DROPBOX/REPOS/ss_personal_quarto_blog/posts/2019-07-11-shrotriya2019distillpt1/images/08_02_netlify_give_personal_blog_access.png){width=150% class=external}\n:::\n:::\n\n</center>\n\nI clicked on my site that appears and then ensured that I selected to ensure\nthat the **Branch to Deploy** option is set to `master`.\n\n<center>\n\n::: {.cell}\n::: {.cell-output-display}\n![Configuring Netlify Build Options](/Users/shamindras/DROPBOX/REPOS/ss_personal_quarto_blog/posts/2019-07-11-shrotriya2019distillpt1/images/08_03_netlify_deploy_master_branch_blog.png){width=150% class=external}\n:::\n:::\n\n</center> <aside> This simply means that netlify will only build the site based\non what happens in my `master` branch in my [github\nrepo](https://github.com/shamindras/ss_personal_distill_blog) </aside>\n\nI then clicked **Deploy Site** and then saw the following deployment settings:\n\n<center>\n\n::: {.cell}\n::: {.cell-output-display}\n![Default Netlify Site Name](/Users/shamindras/DROPBOX/REPOS/ss_personal_quarto_blog/posts/2019-07-11-shrotriya2019distillpt1/images/08_04_netlify_deployment_settings.png){width=150% class=external}\n:::\n:::\n\n</center>\n\nI clicked thee **Site Settings** button. Looks like my site name on `Netlify`\nis `goofy-babbage-7f05c8`. Cute, though I'll personalize by clicking the\n**Change Site Name** button. I changed it to `ss-personal-distill-blog` for my\neasy reference.\n\nI clicked the **Build and Deploy** button next and after clicking the **Edit\nSettings** button modified the **Publish directory** to be `_site` as shown\nbelow:\n\n<center>\n\n::: {.cell}\n::: {.cell-output-display}\n![Setup Continuous Deployment with Netlify](/Users/shamindras/DROPBOX/REPOS/ss_personal_quarto_blog/posts/2019-07-11-shrotriya2019distillpt1/images/08_05_netlify_continous_deployment_settings.png){width=150% class=external}\n:::\n:::\n\n</center>\n\nThis is where all our blogposts in our `github` repo will be rendered to `html`\nby `distill` once we `knit` them. Netlify will just pick them up from here\neverytime you refresh them and deploy our website accordingly\n\nNext I need to manage the domain i.e. tell Netlify to deploy my site on the\ncustom domain I just purchased from Google Domains.\n\n<center>\n\n::: {.cell}\n::: {.cell-output-display}\n![Customize Site Domains with Netlify](/Users/shamindras/DROPBOX/REPOS/ss_personal_quarto_blog/posts/2019-07-11-shrotriya2019distillpt1/images/08_06_netlify_adding_custom_domain.png){width=150% class=external}\n:::\n:::\n\n</center>\n\nAfter clicking verify we have the following domains now set, with\n`www.shamindras.com` being the primary domain.\n\n<center>\n\n::: {.cell}\n::: {.cell-output-display}\n![All Custom Domains for Site with Netlify](/Users/shamindras/DROPBOX/REPOS/ss_personal_quarto_blog/posts/2019-07-11-shrotriya2019distillpt1/images/08_07_netlify_checking_custom_domains.png){width=150% class=external}\n:::\n:::\n\n</center>\n\nNetlify also tells me that the truncated url `shamindras.com` will also get\nrouted to the blog. So I don't event need to write the `www.` going forward.\nThanks Netlify üôè.\n\n## Step 9: Patiently wait for deployment\n\nWith everything setup and configured on github/Netlify the deployment should be\nnear instantaneous. But after about 20 mins my blog appeared at\n[www.shamindras.com](www.shamindras.com){target=\"_blank\"}. So effectively\nNetlify and github were now talking to each other and site is setup!\n\n## Step 10: Future additions and extras\n\nNow that the blog/site is created there are a number of features I'd like to\nadd. The most important being more blogposts and personal content. However it\nwould also be nice to have the following features:\n\n- Documenting a general `distill` blogging workflow\n- Setting up [Disqus](https://disqus.com/){target=\"_blank\"} to enable user comments on blogposts\n- How to setup **Blog Gallery** for featured posts\n- How to setup an **email subscription** service for this blog\n- How to setup **Google Analytics** service for basic user activity tracking\n\nI will make sure to document the setup process as part of a series of future\nblog posts\n\n## Concluding Thoughts\n\nIf you managed to read this far, then I sincerely thank you. I hope to make\neven better technical and personal blogposts going forward. Please feel free to\nleave a friendly comment below for any questions you may have or any feedback\nfor future blogposts.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}