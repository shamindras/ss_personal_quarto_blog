---
title: "Tidyverse Fun - Part 2"
description: |
  Second part in a series of doing useful tasks with
  the `Tidyverse`. This time auto-generating sequential
  LaTeX `newcommand` macros
categories: [tidyverse, rstats]
slug: shrotriya2019tidyfunpt2
date: "2019-08-24"
image: images/logo-01.jpg
bibliography: ../../refs.bib
format: 
  html:
    code-link: true
execute:
  echo: true
editor_options: 
  markdown: 
    wrap: 80
---

## Task: Generating LaTeX newcommand macros

### The central problem

In a custom $\LaTeX$ macro file I needed to generate several sequential
$\LaTeX$ `newcommand` entries of the form:

```markup
\newcommand{\bfa}{\mathbf{a}}
\newcommand{\bfA}{\mathbf{A}}
```

Where using `$\bfa$` produces $\mathbf{a}$ and using `$\bfA$` produces
$\mathbf{A}$ i.e the lowecase/uppercase `mathbf` commands respectively.

Specifically I needed to construct 52 such combined sequential entries for both
lowercase/uppercase letter versions of these `newcommand` $\LaTeX$ macros.
Rather than do this manually, I realized that this would be another fun
scripting exercise with using the `tidyverse` packages `glue`, `purrr`, and
`stringr` similar to this similar [previous post
here](https://www.shamindras.com/posts/2019-07-15-shrotriya2019tidyfunpt1/).

**Goal:** Create 52 such lowercase/uppercase `newcommand` entries and print to
the console to directly-copy paste to my $\LaTeX$ macros file.

### The `tidy` approach

First step is to write a function that takes as an input the following:

- a single letter (case-sensitive) e.g. `"a"`
- the macro shortcut command prefix you prefer e.g `"bf"`
(for **b**old **f**ont in case you were wondering!)
- the specific $\LaTeX$ command that we are creating a macro shortcut for
i.e. `"mathbf"` in this case

The function then outputs a single `newcommand` entry for that lecture i.e
`\newcommand{\bfa}{\mathbf{a}}` in this case. Let's do it!

```{r latx_01_01, eval=TRUE, echo=TRUE, message=FALSE}
# Load required libraries
library(tidyverse)
library(glue)

# Create LaTeX macro newcommand
get_lec_newcmd <- function(inp_letr, mac_type, mac_ref){
    out_str <- glue::glue('\\newcommand{\\<mac_type><inp_letr>}{\\<mac_ref>{<inp_letr>}}',
                          .open = "<", .close = ">")
    base::return(out_str)
}
```

Let's just test this out quickly:

```{r latx_01_02, eval=TRUE, echo=TRUE}
c("a", "A") %>%
    purrr::map_chr(.x = ., .f = ~get_lec_newcmd(inp_letr = .x,
                                                mac_type = "bf",
                                                mac_ref = "mathbf")) %>%
    cat(., sep = "\n")
```

Great - looks like it is working as required!

Note that we can easily generate other $\LaTeX$ macros like follows

```{r latx_01_03, eval=TRUE, echo=TRUE}
c("a", "A") %>%
    purrr::map_chr(.x = ., .f = ~get_lec_newcmd(inp_letr = .x,
                                                mac_type = "mc",
                                                mac_ref = "mathcal")) %>%
    cat(., sep = "\n")
```

Which generates the corresponding `mathcal` macros for $\mathcal{a}$ and
$\mathcal{A}$ respectively.

So finally we can generate all 52 letter macros at time by simply replacing
`c("a", "A")` with `c(letters, LETTERS)` which uses the input
lowercase/uppercase `letters`/`LETTERS` vectors in base `R`:

```{r latx_01_04, results='asis', echo=FALSE}
c(letters, LETTERS) %>%
    purrr::map_chr(.x = ., .f = ~get_lec_newcmd(inp_letr = .x,
                                                mac_type = "bf",
                                                mac_ref = "mathbf")) %>%
    details::details(summary = 'Full newcommand Demo Output')
```


Hope you have fun using this to quickly generate your $\LaTeX$ `newcommand`
macros `r emo::ji("victory")`.

```{r, child=here::here("data", "rmds", "acknowledgment_preview_tidyfun_salil.Rmd")}